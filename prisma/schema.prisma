// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String?    
  name        String?
  avatarUrl   String?
  provider    AuthProvider[]
  videos      Video[]   
  comments    Comment[]
  workspaces  WorkspaceMember[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  Integration Integration[]
  billing Billing? 
}

model AuthProvider {
  id             String   @id @default(uuid())
  provider       String   
  providerUserId String
  accessToken    String
  refreshToken   String?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())

  @@unique([provider, providerUserId])
}

model Workspace {
  id          String             @id @default(uuid())
  name        String
  slug        String             @unique
  members     WorkspaceMember[]
  videos      Video[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model WorkspaceMember {
  id          String     @id @default(uuid())
  role        WorkspaceRole
  userId      String
  workspaceId String
  user        User       @relation(fields: [userId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

model Video {
  id             String       @id @default(uuid())
  title          String
  description    String?
  url            String       // Cloud storage (S3, Cloudflare R2, etc.)
  thumbnailUrl   String?
  duration       Int?         // in seconds
  visibility     Visibility   @default(PRIVATE)
  userId         String
  workspaceId    String?
  user           User         @relation(fields: [userId], references: [id])
  workspace      Workspace?   @relation(fields: [workspaceId], references: [id])
  comments       Comment[]
  shares         VideoShare[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Visibility {
  PRIVATE
  WORKSPACE
  PUBLIC
  UNLISTED
}

model VideoShare {
  id        String   @id @default(uuid())
  videoId   String
  email     String?  
  userId    String? 
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Integration {
  id          String   @id @default(uuid())
  provider    String  
  accessToken String
  metadata    Json?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}


model Billing {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  plan        Plan     @default(FREE)
  status      BillingStatus @default(ACTIVE)
  startDate   DateTime @default(now())
  endDate     DateTime?
  subscriptionId String?  


  invoices    Invoice[]
  transactions Transaction[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Plan {
  FREE
  BUSINESS
  ENTERPRISE
}

enum BillingStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
}

model Invoice {
  id          String   @id @default(uuid())
  billingId   String
  billing     Billing  @relation(fields: [billingId], references: [id])

  amount      Int
  currency    String   @default("USD")
  issuedAt    DateTime @default(now())
  paidAt      DateTime?
  status      InvoiceStatus @default(PENDING)
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
}

model Transaction {
  id          String   @id @default(uuid())
  billingId   String
  billing     Billing  @relation(fields: [billingId], references: [id])

  provider    String   
  reference   String   
  amount      Int
  currency    String   @default("USD")
  status      TransactionStatus @default(SUCCESS)
  createdAt   DateTime @default(now())
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
}
